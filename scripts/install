#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================
source _common.sh
source /usr/share/yunohost/helpers

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

# Retrieve arguments
domain=$1
path_url=$2
admin=$3
is_public=$4
final_path=/var/www/$app
postfix=/etc/postfix/main.cf

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Check web path availability
ynh_webpath_available $domain $path_url
# Register (book) web path
ynh_webpath_register $app $domain $path_url

# Check user
ynh_user_exists "$admin"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app is_public $is_public
#sudo yunohost app setting $app is_public -v "$is_public"

#install dependency
ynh_install_app_dependencies $pkg_dependencies

#install locale (nginx will restart at the end of the install)
for i in $lang
do
#  cat /etc/locale.gen | grep "^[^#;]" | grep $i
#  if [[ ! $? -eq 0 ]]; then
#    echo "$i UTF-8" >> /etc/locale.gen
#    locale=1
#  fi
ynh_replace_string "#$i" "$i" /etc/locale.gen

done
#if [[ $locale -eq 1 ]]; then
  locale-gen
#fi

# Copy source files
sudo mkdir -p $final_path
sudo cp -R ../src/* $final_path
sudo cp ../conf/index_source.php $final_path/www/index.php

#Temporaire - mettre en config
ln -s $final_path/lang/fr $final_path/lang/fr_FR
ln -s $final_path/lang/it $final_path/lang/it_IT

#configuring with given settings
sudo cp $final_path/conf-dist.php $final_path/conf.php
sudo chown -R www-data:www-data $final_path
sudo sed -i "s@exemple.fr@$domain@g" $final_path/conf.php
sudo sed -i "s@exemple.com@$domain@g" $final_path/conf.php

#generating random password for database
db_pwd=$(dd if=/dev/urandom bs=1 count=200 2> /dev/null | tr -c -d '[A-Za-z0-9]' | sed -n 's/\(.\{24\}\).*/\1/p')
db_user=emailPoubelle

#write password to the conf file
ynh_replace_string "motdepassedefou" "$db_pwd" $final_path/conf.php
#sudo sed -i "s@motdepassedefou@$db_pwd@g" $final_path/conf.php

#setting conf file not world-readable (dude, there is a plain-text password !)
sudo chmod o-r $final_path/conf.php

#initialize database (databasename = db_user)
ynh_mysql_create_db $db_user $db_user $db_pwd 
#sudo yunohost app initdb $db_user -p $db_pwd

#setting postfix to use virtual aliases file
sudo cp $postfix $postfix.emailpoubelle.bak #backup it eventually if that causes some issues
sudo sed -i "s/^virtual_alias_maps/#virtual_alias_maps/g" $postfix
echo  "virtual_alias_maps = hash:$final_path/var/virtual" | sudo tee -a $postfix

#create the virtual aliases file 
sudo touch $final_path/var/virtual
sudo postmap $final_path/var/virtual
sudo chown www-data $final_path/var/virtual
sudo chown www-data $final_path/var/virtual.db

#create an alias for deleted junk adresses
sudo cp /etc/aliases /etc/aliases.emailpoubelle.bak #backup it 
sudo echo "devnull:/dev/null" | sudo tee -a /etc/aliases
sudo newaliases

# Modify Nginx configuration file and copy it to Nginx conf directory
#sudo sed -i "s@YNH_EXAMPLE_PATH@$path@g" ../conf/nginx.conf
#sudo sed -i "s@YNH_EXAMPLE_ALIAS@$final_path/www/@g" ../conf/nginx.conf
#sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app.conf

# Handle root path, avoid double slash.
# Temporary fix, in waiting for an upgrade of the helper. (#361)
path_url_slash_less=${path_url%/}
ynh_replace_string "__PATH__/" "$path_url_slash_less/" "../conf/nginx.conf"

# Create a dedicated nginx config
ynh_add_nginx_config

# If app is public, add url to SSOWat conf as skipped_uris
if [ "$is_public" = "Yes" ];
then
sudo yunohost app setting $app skipped_uris -v "/"
fi

#adding php-cli for cron
sudo apt-get update -qq 
sudo apt-get install -yqq php5-cli
#adding cronjob for removing expired email addresses
sudo echo "$cronline" | sudo tee -a /etc/cron.d/emailpoubelle 
sudo chmod 644 /etc/cron.d/emailpoubelle 

# Restart services
sudo service nginx reload
sudo service postfix reload
sudo service php* reload
sudo yunohost app ssowatconf
 
